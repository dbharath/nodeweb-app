# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := magickwand
DEFS_Debug := \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fPIC \
	-Wall \
	-pthread \
	-m64 \
	-I/usr/include/ImageMagick \
	-fopenmp \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
	-fno-exceptions

INCS_Debug := \
	-I/home/ubuntu/.node-gyp/0.8.12/src \
	-I/home/ubuntu/.node-gyp/0.8.12/deps/uv/include \
	-I/home/ubuntu/.node-gyp/0.8.12/deps/v8/include

DEFS_Release := \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64'

# Flags passed to all source files.
CFLAGS_Release := \
	-fPIC \
	-Wall \
	-pthread \
	-m64 \
	-I/usr/include/ImageMagick \
	-fopenmp \
	-O2 \
	-fno-strict-aliasing \
	-fno-tree-vrp

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
	-fno-exceptions

INCS_Release := \
	-I/home/ubuntu/.node-gyp/0.8.12/src \
	-I/home/ubuntu/.node-gyp/0.8.12/deps/uv/include \
	-I/home/ubuntu/.node-gyp/0.8.12/deps/v8/include

OBJS := \
	$(obj).target/$(TARGET)/src/module.o \
	$(obj).target/$(TARGET)/src/resize.o \
	$(obj).target/$(TARGET)/src/thumbnail.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS := \
	-L/usr/lib \
	-lMagickWand \
	-lMagickCore \
	-llcms \
	-ltiff \
	-lfreetype \
	-ljpeg \
	-llqr-1 \
	-lglib-2.0 \
	-lfontconfig \
	-lXext \
	-lSM \
	-lICE \
	-lX11 \
	-lXt \
	-lbz2 \
	-lz \
	-lm \
	-lgomp \
	-lpthread \
	-lltdl

$(obj).target/magickwand.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/magickwand.node: LIBS := $(LIBS)
$(obj).target/magickwand.node: TOOLSET := $(TOOLSET)
$(obj).target/magickwand.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(obj).target/magickwand.node
# Add target alias
.PHONY: magickwand
magickwand: $(builddir)/magickwand.node

# Copy this to the executable output path.
$(builddir)/magickwand.node: TOOLSET := $(TOOLSET)
$(builddir)/magickwand.node: $(obj).target/magickwand.node FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/magickwand.node
# Short alias for building this executable.
.PHONY: magickwand.node
magickwand.node: $(obj).target/magickwand.node $(builddir)/magickwand.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/magickwand.node

